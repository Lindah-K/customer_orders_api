name: CI/CD for Customer Order Services Django API

on:
  push:
    branches:
      - main

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  

      - name: Set up Python
        uses: actions/setup-python@v4  
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Debug Environment Variables
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}  
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}  
          SECRET_KEY: ${{ secrets.SECRET_KEY }}  
          SMS_API_KEY: ${{ secrets.SMS_API_KEY }}  
          DEBUG: ${{ secrets.DEBUG }}  
        run: echo "Environment variables loaded."

      - name: Run Unit Tests with Coverage
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}  
          SECRET_KEY: ${{ secrets.SECRET_KEY }}  
          DEBUG: ${{ secrets.DEBUG }}  
          CLIENT_ID: ${{ secrets.CLIENT_ID }}  
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}  
          SMS_API_KEY: ${{ secrets.SMS_API_KEY }}  
        run: |
          coverage run --source='.' manage.py test
          coverage report
          coverage html  # Generate HTML report

      - name: Check Coverage Directory
        run: |
          if [ -d "htmlcov" ]; then
            echo "Coverage directory exists."
          else
            echo "Coverage directory does not exist."
            exit 1
          fi

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/*

      - name: Collect Static Files
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}  
          SECRET_KEY: ${{ secrets.SECRET_KEY }}  
          CLIENT_ID: ${{ secrets.CLIENT_ID }}  
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}  
          SMS_API_KEY: ${{ secrets.SMS_API_KEY }}  
          DEBUG: ${{ secrets.DEBUG }}  
        run: python manage.py collectstatic --noinput

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}  
          SECRET_KEY: ${{ secrets.SECRET_KEY }}  
          CLIENT_ID: ${{ secrets.CLIENT_ID }}  
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}  
        run: |
          response=$(curl -X POST https://api.render.com/v1/deploy \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"serviceId":"srv-crpr70t6l47c73ao44r0"}' -v)

          echo "Response from Render: $response"
